<?xml version="1.0"?>
<!--
  Copyright (c) 2000, 2020, Oracle and/or its affiliates.

  Licensed under the Universal Permissive License v 1.0 as shown at
  http://oss.oracle.com/licenses/upl.
-->

<xs:schema xmlns="http://schemas.tangosol.com/pof"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://schemas.tangosol.com/pof"
           elementFormDefault="qualified">

  <xs:annotation>
    <xs:documentation>
      Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

      Oracle is a registered trademarks of Oracle Corporation and/or its affiliates.

      This software is the confidential and proprietary information of
      Oracle Corporation.  You shall not disclose such confidential and
      proprietary information and shall use it only in accordance with the
      terms of the license agreement you entered into with Oracle.

      This notice may not be removed or altered.
    </xs:documentation>
  </xs:annotation>

  <xs:annotation>
    <xs:documentation>
      <![CDATA[This is the XML schema for the Coherence for .NET POF configuration file.
      The configuration file's root element should include reference to the schema:

      <pof-config xmlns="http://schemas.tangosol.com/pof"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://schemas.tangosol.com/pof
                  assembly://Coherence.Core/Tangosol.Config/pof-config.xsd">]]>
    </xs:documentation>
  </xs:annotation>

  <xs:complexType name="pof-config">
    <xs:sequence>
      <xs:element ref="user-type-list"/>
      <xs:element ref="allow-interfaces" minOccurs="0"/>
      <xs:element ref="allow-subclasses" minOccurs="0"/>
      <xs:element ref="enable-references" minOccurs="0"/>
      <xs:element ref="default-serializer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="pof-config" type="pof-config">
    <xs:annotation>
      <xs:documentation>
        The pof-config element is the root element of the pof-config descriptor.

        Used in: n/a
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="user-type-list">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="user-type"/>
      <xs:element ref="include"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="user-type-list" type="user-type-list">
    <xs:annotation>
      <xs:documentation>
        The user-type-list element contains zero or more user-type elements. Each
        POF user type that will be used must be listed in the user-type-list.

        The user-type-list element may also contain zero or more include elements.
        Each include element is used to add user-type elements defined in another
        pof-config file.

        Used in: pof-config
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="user-type">
    <xs:sequence>
      <xs:element ref="type-id" minOccurs="0"/>
      <xs:element ref="class-name"/>
      <xs:element ref="serializer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="user-type" type="user-type">
    <xs:annotation>
      <xs:documentation>
        The user-type element contains the declaration of a POF user type. A POF
        user type is a uniquely identifiable, portable, versionable object class
        that can be communicated among systems regardless of language, OS,
        hardware and location.

        Within the user-type element, the type-id element is optional, but its
        use is strongly suggested in order to support schema versioning and
        evolution.

        Within the user-type element, the class-name element is required, and
        specifies the fully qualified name of the .NET class or interface that
        all values of the user type are type-assignable to.

        If the serializer element is omitted, then the user type is assumed to
        implement the IPortableObject interface, and the PortableObjectSerializer
        implementation is used as the IPofSerializer.

        Used in: user-type-list
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="include" type="xs:string">
    <xs:annotation>
      <xs:documentation>
        The include element specifies the location of a pof-config file to load
        user-type elements from.

        The value is a resource path string that
        identifies the location of the target pof-config file.

        Used in: user-type-list
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="type-id" type="xs:integer">
    <xs:annotation>
      <xs:documentation>
        The type-id element specifies an integer value (n >= 0) that uniquely
        identifies the user type.

        If none of the user-type elements contains a type-id element, then the
        type IDs for the user types will be based on the order in which they
        appear in the user-type-list, with the first user type being assigned the
        type ID 0, the second user type being assigned the type ID 1, and so on.

        However, it is strongly recommended that user types IDs always be
        specified, in order to support schema versioning and evolution.

        Used in: user-type
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="class-name" type="xs:string">
    <xs:annotation>
      <xs:documentation>
        The class-name element specifies the name of a .NET class or interface.

        Within the user-type element, the class-name element is required, and
        specifies the fully qualified name of the class or interface that all
        values of the user type are type-assignable to.

        Within the serializer element, the class-name element is required.

        Used in: user-type, serializer
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="serializer">
    <xs:sequence>
      <xs:element ref="class-name"/>
      <xs:element ref="init-params" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="serializer" type="serializer">
    <xs:annotation>
      <xs:documentation>
        The serializer element specifies what IPofSerializer to use to serialize
        and deserialize a specific user type.

        A IPofSerializer is used to serialize and deserialize user type values to
        and from a POF stream. Within the serializer element, the class-name
        element is required, and zero or more constructor parameters can be
        defined within an init-params element.

        If the serializer element is omitted, then the user type is assumed to
        implement the IPortableObject interface, and the PortableObjectSerializer
        implementation is used as the IPofSerializer.

        If the init-params element is omitted from the serializer element, then
        the following three constructors are attempted on the specific
        PofSerializer implementation, and in this order:

        - (int nTypeId, Type type)
        - (int nTypeId)
        - ()

        Used in: user-type
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="init-params">
    <xs:sequence>
      <xs:element ref="init-param" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="init-params" type="init-params">
    <xs:annotation>
      <xs:documentation>
        The init-params element contains zero or more arguments (each as an
        init-param) that correspond to the parameters of a constructor of the
        class that is being configured.

        Used in: serializer
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="init-param">
    <xs:sequence>
      <xs:element ref="param-type"/>
      <xs:element ref="param-value"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="init-param" type="init-param">
    <xs:annotation>
      <xs:documentation>
        The init-param element provides a type for a configuration parameter and
        a corresponding value to pass as an argument.

        Used in: init-params
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:simpleType name="param-type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="string"/>
      <xs:enumeration value="bool"/>
      <xs:enumeration value="int"/>
      <xs:enumeration value="long"/>
      <xs:enumeration value="double"/>
      <xs:enumeration value="float"/>
      <xs:enumeration value="decimal"/>
      <xs:enumeration value="file"/>
      <xs:enumeration value="date"/>
      <xs:enumeration value="time"/>
      <xs:enumeration value="xml"/>
      <xs:enumeration value="class"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="param-type" type="param-type">
    <xs:annotation>
      <xs:documentation>
        The param-type element specifies the .NET type of initialization parameter.

        Supported types are:
        - string  - indicates that the value is a System.String
        - bool    - indicates that the value is a System.Boolean
        - int     - indicates that the value is a System.Int32
        - long    - indicates that the value is a System.Int64
        - double  - indicates that the value is a System.Double
        - float   - indicates that the value is a System.Single
        - decimal - indicates that the value is a System.Decimal
        - file    - indicates that the value is a System.IO.File
        - date    - indicates that the value is a System.DateTime
        - time    - indicates that the value is a System.DateTime
        - xml     - indicates that the value is the entire init-param XmlNode

        The value is converted to the specified type, and the target constructor
        or method must have a parameter of that type in order for the
        instantiation to succeed.

        Used in: init-param
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="param-value" type="xs:string">
    <xs:annotation>
      <xs:documentation>
        The param-value element specifies a value of the initialization
        parameter.

        The value is in a format specific to the type of the parameter.

        There are three reserved values that can be specified. Each of these
        values is replaced at runtime with a specific runtime value before the
        constructor is invoked:
        - "{type-id}"    - replaced with the Type ID of the User Type;
        - "{class-name}" - replaced with the name of the class for the User Type;
        - "{class}"      - replaced with the Type for the User Type;

        Used in: init-param
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="allow-interfaces" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>
        The allow-interfaces element indicates whether the user-type class-name
        can specify .NET interface types in addition to .NET class types.

        Valid values are "true" or "false". Default value is false.

        Used in: pof-config
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="allow-subclasses" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>
        The allow-subclasses element indicates whether the user-type class-name
        can specify a .NET class type that is abstract, and whether sub-classes
        of any specified user-type class-name will be permitted at runtime and
        automatically mapped to the specified super-class for purposes of obtaining
        a serializer.

        Valid values are "true" or "false". Default value is false.

        Used in: pof-config
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="enable-references" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>
        The enable-references element indicates whether Identity/Reference
        type support is enabled.

        Valid values are "true" or "false". Default value is false.

        Used in: pof-config
      </xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="default-serializer" type="serializer">
    <xs:annotation>
      <xs:documentation>
        The default serializer element specifies what IPofSerializer to use to
        serialize and deserialize all user types defined in this config.

        If the default serializer element is omitted, serializer defined for
        specific user type will be used. If the serializer for the user type
        is also omitted, then the user type is assumed to implement the
        IPortableObject interface, and the PortableObjectSerializer
        implementation is used as the IPofSerializer.

        If the init-params element is omitted from the default serializer element,
        then the following three constructors are attempted on the specific
        IPofSerializer implementation, and in this order:

        - (int nTypeId, Type type)
        - (int nTypeId)
        - ()

        Used in: pof-config
      </xs:documentation>
    </xs:annotation>
  </xs:element>
</xs:schema>
